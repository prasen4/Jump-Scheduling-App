// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  schedulingLinks SchedulingLink[]
  schedulingWindows SchedulingWindow[]
  meetings      Meeting[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token         String? @db.Text
  session_state    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model SchedulingWindow {
  id        String   @id @default(cuid())
  userId    String
  dayOfWeek Int      // 1-5 for Monday-Friday
  startHour Int
  endHour   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SchedulingLink {
  id                String    @id @default(cuid())
  userId            String
  maxUses          Int?
  usageCount       Int       @default(0)
  expirationDate   DateTime?
  meetingLength    Int       // in minutes
  maxDaysInAdvance Int
  formQuestions    Json      // Array of questions
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  meetings         Meeting[]
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Meeting {
  id               String         @id @default(cuid())
  schedulingLinkId String
  userId           String
  attendeeEmail    String
  attendeeLinkedIn String?
  startTime        DateTime
  endTime          DateTime
  answers          Json          // Answers to form questions
  hubspotContext   String?       @db.Text
  linkedinContext  String?       @db.Text
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  schedulingLink   SchedulingLink @relation(fields: [schedulingLinkId], references: [id], onDelete: Cascade)
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}
